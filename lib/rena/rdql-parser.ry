# -*- mode: ruby -*-
#
# Copyright (c) 2004 Masahiro Sakai <sakai@tom.sfc.keio.ac.jp>
# You can redistribute it and/or modify it under the same term as Ruby.
#

# racc -E -o rdql-parser.rb rdql-parser.ry

# http://www.hpl.hp.com/semweb/rdql.htm#RDQL%20Grammar
class Parser

rule

compilation_unit : query EOF

query
	: select_clause source_clause_or_nil
          triple_pattern_clause constraint_clause_or_nil prefixes_clause_or_nil
	  {
            prefixes = Hash.new
            val[4].each{|(key,value)| prefixes[key] = value }
            result = Query.new(val[0], val[1], val[2], val[3], prefixes)
          }

# XXX
source_clause_or_nil
	:
        | source_clause

# XXX
constraint_clause_or_nil
	: { result = [] }
	| constraint_clause

# XXX
prefixes_clause_or_nil
	: { result = [] }
	| prefixes_clause

select_clause
	#: SELECT var ( "," var )*
	: SELECT vars { result = val[1]} # XXX
	| SELECT STAR  { result = []}

# XXX
vars
	: var
          { result = [val[0]] }
	| vars "," var
	  { result.push val[2] }

source_clause
	#: ( SOURCE | FROM ) source_selector
	: SOURCE source_selector # XXX
	  { return val[1] }
	| FROM source_selector # XXX
	  { return val[1] }

source_selector : url

triple_pattern_clause
	#: WHERE triple_pattern ( "," triple_pattern )*
	: WHERE triple_patterns { result = val[1] } # XXX

triple_patterns
	: triple_pattern { result = [val[0]] }
	| triple_patterns "," triple_pattern { result.push val[2] }

constraint_clause
	#: SUCHTHAT expression ( ( "," | SUCHTHAT ) expression )*
	: SUCHTHAT expression constraint_clause_tail
	  { result = val[2].unshift(val[1]) }

# XXX
constraint_clause_tail
	: { result = []}
	| constraint_clause_tail "," expression      { result.push val[2] }
	| constraint_clause_tail SUCHTHAT expression { result.push val[2] }

triple_pattern
	: LPAREN var_or_uri "," var_or_uri "," var_or_literal RPAREN
          { result = [val[1], val[3], val[5]] }

var_or_uri
	: var
	| uri

var_or_literal
	: var
	| literal

var
	: "?" identifier { result = val[1] }

prefixes_clause
	#: PREFIXES prefix_decl ( "," prefix_decl )*
	: PREFIXES prefix_decls { result = val[1] }

# XXX
prefix_decls
	: prefix_decl                  { result = [val[0]] }
	| prefix_decls "," prefix_decl { result.push val[2] }

prefix_decl
	: identifier FOR uri { result = [val[0],val[2]] }

expression
	: conditional_or_expression

conditional_or_expression
	#: conditional_x_or_expression ( SC_OR conditional_x_or_expression )*
	: conditional_x_or_expression { result = ConditionalOr.new(val[0]) }
	| conditional_or_expression SC_OR conditional_x_or_expression
	  { result.args.push val[2] } # FIXME

conditional_x_or_expression : conditional_and_expression

conditional_and_expression
	#: value_logical ( SC_AND value_logical )*
	: value_logical { result = ConditionalAnd.new(val[0]) }
	| conditional_and_expression SC_AND value_logical
	  { result.args.push val[2] } # FIXME

value_logical : string_equality_expression

string_equality_expression
	#: numerical_logical ( STR_EQ numerical_logical | STR_NE numerical_logical )*
	: numerical_logical
	| string_equality_expression STR_EQ numerical_logical
	  { result = StringEqual.new(val[0], val[2]) }
	| string_equality_expression STR_NE numerical_logical
	  { result = StringNotEqual.new(val[0], val[2]) }

numerical_logical : inclusive_or_expression

inclusive_or_expression
	#: exclusive_or_expression ( BIT_OR exclusive_or_expression )*
	: exclusive_or_expression { result = BitOR.new(val[0]) }
	| inclusive_or_expression BIT_OR exclusive_or_expression
	  { result.args.push val[2] }

exclusive_or_expression
	#: 	and_expression ( BIT_XOR and_expression )*
	: and_expression { result = BitXOR.new(val[0]) }
	| exclusive_or_expression BIT_XOR and_expression
	  { result.args.push val[2] }

and_expression
	#: 	arithmetic_condition ( BIT_AND arithmetic_condition )*
	: arithmetic_condition  { result = BitAND.new(val[0]) }
	| and_expression BIT_AND arithmetic_condition
	  { result.args.push val[2] }

arithmetic_condition
	: 	equality_expression

equality_expression
	#: 	relational_expression ( EQ relational_expression | NEQ relational_expression )?
	: relational_expression
	| relational_expression EQ relational_expression
	  { result = Eq.new(val[0], val[2]) }
	| relational_expression NEQ relational_expression
	  { result = NEq.new(val[0], val[2]) }

relational_expression
	#: 	numeric_expression ( LT numeric_expression | GT numeric_expression | LE numeric_expression | GE numeric_expression )?
	: numeric_expression
	| numeric_expression LT numeric_expression
	  { result = BinaryRel.new(:<, val[0], val[2]) }
	| numeric_expression GT numeric_expression
	  { result = BinaryRel.new(:>, val[0], val[2]) }
	| numeric_expression LE numeric_expression
	  { result = BinaryRel.new(:<=, val[0], val[2]) }
	| numeric_expression GE numeric_expression
	  { result = BinaryRel.new(:>=, val[0], val[2]) }

numeric_expression
	: 	shift_expression

shift_expression
	#: 	additive_expression ( LSHIFT additive_expression | RSIGNEDSHIFT additive_expression | RUNSIGNEDSHIFT additive_expression )*
	: additive_expression
	| additive_expression LSHIFT additive_expression
	  { result = BinaryOP.new(:<<, val[0], val[2]) }
	| additive_expression RSIGNEDSHIFT additive_expression
	  { result = BinaryOp.new(:>>, val[0], val[2]) }
	| additive_expression RUNSIGNEDSHIFT additive_expression
	  { result = BinaryOp.new(:">>>", val[0], val[2]) }

additive_expression
	#: 	multiplicative_expression ( PLUS multiplicative_expression | MINUS multiplicative_expression )*
	: multiplicative_expression
	| additive_expression PLUS multiplicative_expression
	  { result = BinaryOp.new(:+, val[0], val[2]) }
	| additive_expression MINUS multiplicative_expression
	  { result = BinaryOp.new(:-, val[0], val[2]) }

multiplicative_expression
	#: 	unary_expression ( STAR unary_expression | SLASH unary_expression | REM unary_expression )*
	: unary_expression
	| multiplicative_expression STAR unary_expression
	  { result = BinaryOp.new(:*, val[0], val[2]) }
	| multiplicative_expression REM unary_expression
	  { result = BinaryOp.new(:%, val[0], val[2]) }

unary_expression
	: 	unary_expression_not_plus_minus
	#| 	( PLUS unary_expression | MINUS unary_expression )
	| PLUS unary_expression
	  { result = UnaryOp.new(:+, val[1]) }
	| MINUS unary_expression
	  { result = UnaryOp.new(:-, val[1]) }

unary_expression_not_plus_minus
	#: 	( TILDE | BANG ) unary_expression
	: 	TILDE unary_expression
	  { result = UnaryOp.new(:~, val[1]) }
	|	BANG unary_expression
	  { result = UnaryOp.new(:"!", val[1]) }
	| 	primary_expression

primary_expression
	: 	var
	| 	literal
	| 	function_call
	| 	LPAREN expression RPAREN
	  { result = val[1] }

function_call
	: 	identifier LPAREN arg_list RPAREN

arg_list
	#: 	var_or_literal ( "," var_or_literal )*
	: var_or_literal
	| arg_list "," var_or_literal

literal
	: 	uri
	| 	numeric_literal
	| 	text_literal
	| 	boolean_literal
	| 	null_literal

numeric_literal
	: INTEGER_LITERAL
	| FLOATING_POINT_LITERAL
text_literal	: 	STRING_LITERAL
boolean_literal	: 	BOOLEAN_LITERAL
null_literal	: 	NULL_LITERAL
url		: 	uri
uri		: 	LT URI GT # "<" URI ">"
identifier	:	IDENTIFIER

end

---- header

require 'uri'

module Rena
module RDQL

---- inner

def initialize
  super()
end

def parse(input)
  @input = input
  yyparse(self, :scan)
end

def scan
  @input.each_line{|line|
    line.strip!

    until line.empty?
      case line
      when /\A(SELECT|SOURCE|FROM|WHERE|SUCHTHAT|PREFIXES|FOR)/i
        yield($1.intern, nil)
      when /\A\(/
        yield(:LPAREN, nil)
      when /\A\)/
        yield(:RPAREN, nil)
      when /\A([^<> ,]+)/ # XXX
        # #{URI::REGEXP::PATTERN::ABS_URI}(?:##{URI::REGEXP::PATTERN::FRAGMENT}?)
        yield(:URI, $1)
      when /\A([,\?])/
        yield($1, nil)

      when /\AAND/i
        yield(:SUCHTHAT, nil)
      when /\AUSING/i
        yield(:PREFIXES, nil)

      when /\A\|\|/i
        yield(:SC_OR, nil)
      when /\A&&/i
        yield(:SC_AND, nil)

      when /\Aeq/
        yield(:STR_EQ, nil)
      when /\Ane/
        yield(:STR_NE, nil)

      when /\A&/
        yield(:BIT_AND, nil)
      when /\A\|/
        yield(:BIT_OR, nil)
      when /\A\^/
        yield(:BIT_XOR, nil)

      when /\A%/
        yield(:REM, nil)
      when /\A<</
        yield(:LSHIFT, nil)
      when /\A>>/
        yield(:RSIGNEDSHIFT, nil)
      when /\A>>>/
        yield(:RUNSHIGNEDSHIFT, nil)

      when /\A<=/
        yield(:LE, nil)
      when /\A>=/
        yield(:GE, nil)
      when /\A</
        yield(:LT, nil)
      when /\A>/
        yield(:GT, nil)

      when /\A\+/
        yield(:PLUS, nil)
      when /\A\-/
        yield(:MINUS, nil)
      when /\A\*/
        yield(:STAR, nil)
      when /\A\//
        yield(:SLASH, nil)
      when /\A~/
        yield(:TILDE, nil)
      when /\A!/
        yield(:BANG, nil)

      when /\A([+-]?(?:[0-9]+)?\.[0-9]*)/
        yield(:FLOATING_POINT_LITERAL, $1.to_f)
      when /\A([+-]?[0-9]+)$/
        yield(:INTEGER_LITERAL, $1.to_i)
        

      # STRING_LITERAL, BOOLEAN_LITERAL, NULL_LITERAL, 
      # URI, IDENTIFIER

      when /\A(\w+)/
        yield(:IDENTIFIER, $1.intern)

      when /\A\s+/
      else
        p line
      end

      #p $'

      line = $'
    end
  }
  yield(:EOF, nil)
  yield(false, nil)
end

---- footer

end # module RDQL
end # module Rena
